<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2022/11/18/%E8%83%8C%E5%8C%85%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2022/11/18/%E8%83%8C%E5%8C%85%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h2 id="背包动态规划"><a href="#背包动态规划" class="headerlink" title="背包动态规划"></a>背包动态规划</h2><p>首先，这题是一道水的不能在水的题了</p><p>其次，我还是想说这题真的太水了，就是一模一样的01背包问题，输入输出都没改</p><p>就是改了一个题目背景</p><p>转化时间为背包容量和草药占的量</p><p>先讲一下二维 dp<em>d**p</em>：</p><p>让我假设现在的背包的容量是 C&#x3D;10<em>C</em>&#x3D;10；</p><p>物品编号：1\ \ \ 2\ \ \ 31  2  3</p><p>物品重量：5\ \ \ 6\ \ \ 45  6  4</p><p>物品价值：20\ 10\ 1220 10 12</p><p>用v[i]表示物品价值，w[i]表示物品重量，要使得放入背包的物品价值最大化，我们知道用贪心是不行的！</p><p>所以接下来开始动规：</p><p>首先定义状态 dp[i][j]<em>d**p</em>[<em>i</em>][<em>j</em>] 以 j<em>j</em> 为容量为放入前i个物品(按 i<em>i</em> 从小到大的顺序)的最大价值，那么 i&#x3D;1<em>i</em>&#x3D;1 的时候，放入的是物品 11 ，这时候肯定是最优的啦！</p><p>那考虑一下 j<em>j</em>，j<em>j</em> 是当前容量，如果 j&lt;5<em>j*&lt;5，那么是不是就不能放，dp[1]<a href="j%3C5">j</a>&#x3D;0*d**p*[1]<a href="*j*%3C5"><em>j</em></a>&#x3D;0；那如果 j&gt;5</em>j*&gt;5，就可以放了，dp[1]<a href="j%3E=5">j</a>&#x3D;20<em>d**p</em>[1]<a href="*j*%3E=5"><em>j</em></a>&#x3D;20；</p><p>接着 i&#x3D;2<em>i</em>&#x3D;2 放两个物品，求的就是 dp[2][j]<em>d**p</em>[2][<em>j</em>] 了，当 j&lt;5<em>j</em>&lt;5 的时候，是不是同样的 dp[2]<a href="j%3C5">j</a><em>d**p</em>[2]<a href="*j*%3C5"><em>j</em></a> 等于00；那当 j&lt;6<em>j</em>&lt;6 是不是还是放不下第二个，只能放第一个；</p><p>那 j&gt;6<em>j</em>&gt;6 呢？是不是就可以放第二个了呢？是可以，但是明显不是最优的，用脑子想了一下，发现 dp[2]<a href="j%3E6">j</a>&#x3D;20<em>d**p</em>[2]<a href="*j*%3E6"><em>j</em></a>&#x3D;20，这个 2020 怎么来的呢，当然是从前一个状态来的（注意这里就可以分为两种情况了）：一种是选择第二个物品放入，另一种还是选择前面的物品；</p><p>让我们假设一下 j&#x3D;10<em>j</em>&#x3D;10 吧，可能会比较好理解！这时候： dp[2][10] &#x3D; max((dp[1][10-w[2]])+v[2],dp[1][10])<em>d**p</em>[2][10]&#x3D;<em>m<strong>a</strong>x</em>((<em>d**p</em>[1][10−<em>w</em>[2]])+<em>v</em>[2],<em>d**p</em>[1][10])</p><p>dp[2][10] &#x3D; max(dp[1][4])+10,dp[1][10])<em>d**p</em>[2][10]&#x3D;<em>m<strong>a</strong>x</em>(<em>d**p</em>[1][4])+10,<em>d**p</em>[1][10])</p><p>是不是很明显了呢，dp[1][4]+10<em>d**p</em>[1][4]+10 是选择了第二个，于是容量相应就减少成 44，之前已经得出 dp[1][4]&#x3D;0<em>d**p</em>[1][4]&#x3D;0，就是说选了物品 22，物品 11 就选不了了；dp[1][10]<em>d**p</em>[1][10] 是不选择第二个，只选择第一个 dp[1][10]<em>d**p</em>[1][10] 是等于 2020 的，于是得出 dp[2][10]&#x3D;20<em>d**p</em>[2][10]&#x3D;20</p><p>到这里就可以了，依次类推，动态转移方程为：dp[i][j] &#x3D; max(dp[i-1][j-w[i]])+v[i],dp[i-1][j])<em>d**p</em>[<em>i</em>][<em>j</em>]&#x3D;<em>m<strong>a</strong>x</em>(<em>d**p</em>[<em>i</em>−1][<em>j</em>−<em>w</em>[<em>i</em>]])+<em>v</em>[<em>i</em>],<em>d**p</em>[<em>i</em>−1][<em>j</em>])</p><p>但是好像还有一些问题没考虑完………</p><p>看回例子：</p><p>物品编号：1\ \ \ 2\ \ \ 31  2  3</p><p>物品重量：5\ \ \ 6\ \ \ 45  6  4</p><p>物品价值：20\ 10\ 1220 10 12</p><p>我们知道 dp[1]<a href="j%3C5">j</a>&#x3D;20<em>d**p</em>[1]<a href="*j*%3C5"><em>j</em></a>&#x3D;20，dp[2]<a href="j=5">j</a><em>d**p</em>[2]<a href="*j*=5"><em>j</em></a> 的时候是多少呢？我们看到动态转移方程并没有考虑 j&lt;w[i]<em>j</em>&lt;<em>w</em>[<em>i</em>] 的情况，但是我们可以加进去，由于 dp[2][5]<em>d**p</em>[2][5] 我们看出来是等于 55 的，为什么？因为不能选第二个，只能选第一个，所以….. dp[2][5]<em>d**p</em>[2][5] 是不是刚好等于 dp[1][5]<em>d**p</em>[1][5] 了呢！所以当 j&lt;w[i]<em>j</em>&lt;<em>w</em>[<em>i</em>] 的时候，dp[i][j] &#x3D; dp[i-1][j]<em>d**p</em>[<em>i</em>][<em>j</em>]&#x3D;<em>d**p</em>[<em>i</em>−1][<em>j</em>] 就好了，是不是很神奇呢！</p><p>二维 dp<em>d**p</em> 代码：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">*<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t,m,res=<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;t,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;w[i],&amp;val[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=t;j&gt;=<span class="number">0</span>;j--)  </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(j&gt;=w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][j-w[i]]+val[i],dp[i<span class="number">-1</span>][j]);</span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j]=dp[i<span class="number">-1</span>][j];</span><br><span class="line">            &#125;              </span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,dp[m][t]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再用一维dp看看，我们减掉选到哪一个物品这一维</p><p>有人就要说了，会重复放入</p><p>让我假设现在的背包的容量是 C&#x3D;10<em>C</em>&#x3D;10；</p><p>物品编号：1\ \ \ 2\ \ \ 31  2  3</p><p>物品重量：5\ \ \ 6\ \ \ 45  6  4</p><p>物品价值：20\ 10\ 1220 10 12</p><hr><p>直接分析dp数组：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dp：0 0 0 0 0 0 0 0 0 0</span><br><span class="line">i=1:</span><br><span class="line">dp[10] = max(dp[5]+20, dp[10]);</span><br><span class="line">dp[9] = max(dp[4]+20, dp[9]);</span><br><span class="line">dp[8] = max(dp[3]+20, dp[8]);</span><br><span class="line">dp[7] = max(dp[2]+20, dp[7]);</span><br><span class="line">dp[6] = max(dp[1]+20, dp[6]);</span><br><span class="line">dp[5] = max(dp[0]+20, dp[5]);</span><br></pre></td></tr></table></figure><h2 id="dp-0-0-0-0-20-20-20-20-20-20"><a href="#dp-0-0-0-0-20-20-20-20-20-20" class="headerlink" title="dp: 0 0 0 0 20 20 20 20 20 20"></a><code>dp: 0 0 0 0 20 20 20 20 20 20</code></h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">i=<span class="number">2</span>:</span><br><span class="line">dp[<span class="number">10</span>] = <span class="built_in">max</span>(dp[<span class="number">6</span>]+<span class="number">4</span>, dp[<span class="number">10</span>]);</span><br><span class="line">dp[<span class="number">9</span>] = <span class="built_in">max</span>(dp[<span class="number">3</span>]+<span class="number">10</span>, dp[<span class="number">9</span>]);</span><br><span class="line">dp[<span class="number">8</span>] = <span class="built_in">max</span>(dp[<span class="number">2</span>]+<span class="number">10</span>, dp[<span class="number">8</span>]);</span><br><span class="line">dp[<span class="number">7</span>] = <span class="built_in">max</span>(dp[<span class="number">1</span>]+<span class="number">10</span>, dp[<span class="number">7</span>]);</span><br><span class="line">dp[<span class="number">6</span>] = <span class="built_in">max</span>(dp[<span class="number">0</span>]+<span class="number">10</span>, dp[<span class="number">6</span>]);</span><br></pre></td></tr></table></figure><h2 id="dp-0-0-0-0-20-20-20-20-20-20-看到了没，选10的都被之前的20压下去了"><a href="#dp-0-0-0-0-20-20-20-20-20-20-看到了没，选10的都被之前的20压下去了" class="headerlink" title="dp: 0 0 0 0 20 20 20 20 20 20 //看到了没，选10的都被之前的20压下去了"></a><code>dp: 0 0 0 0 20 20 20 20 20 20 //看到了没，选10的都被之前的20压下去了</code></h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">i=<span class="number">3</span>:</span><br><span class="line">dp[<span class="number">10</span>] = <span class="built_in">max</span>(dp[<span class="number">6</span>]+<span class="number">12</span>, dp[<span class="number">10</span>]);</span><br><span class="line">dp[<span class="number">9</span>] = <span class="built_in">max</span>(dp[<span class="number">5</span>]+<span class="number">12</span>, dp[<span class="number">9</span>]);</span><br><span class="line">dp[<span class="number">8</span>] = <span class="built_in">max</span>(dp[<span class="number">4</span>]+<span class="number">12</span>, dp[<span class="number">8</span>]);</span><br><span class="line">dp[<span class="number">7</span>] = <span class="built_in">max</span>(dp[<span class="number">3</span>]+<span class="number">12</span>, dp[<span class="number">7</span>]);</span><br><span class="line">dp[<span class="number">6</span>] = <span class="built_in">max</span>(dp[<span class="number">2</span>]+<span class="number">12</span>, dp[<span class="number">6</span>]);</span><br><span class="line">dp[<span class="number">5</span>] = <span class="built_in">max</span>(dp[<span class="number">1</span>]+<span class="number">12</span>, dp[<span class="number">5</span>]);</span><br><span class="line">dp[<span class="number">4</span>] = <span class="built_in">max</span>(dp[<span class="number">0</span>]+<span class="number">12</span>, dp[<span class="number">4</span>]);</span><br></pre></td></tr></table></figure><h2 id="dp-0-0-0-12-20-20-20-20-32-32"><a href="#dp-0-0-0-12-20-20-20-20-32-32" class="headerlink" title="dp: 0 0 0 12 20 20 20 20 32 32"></a><code>dp: 0 0 0 12 20 20 20 20 32 32</code></h2><p>dp[10]<em>d**p</em>[10] 就是背包容量为 1010 的时候的最大价值，就是要求的值了，可以看到，容量大的时候的值取决于容量小的时候的值，从而不断被正确更新，所以用一维 dp<em>d**p</em> 的时候，j<em>j</em> 的循环必须是从大到小逆序开始的，逆序，就防止了一个物品放入多次！！！否则………..</p><p>直接分析 dp<em>d**p</em> 数组：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dp：0 0 0 0 0 0 0 0 0 0</span><br><span class="line">i=1:</span><br><span class="line">dp[5] = max(dp[0]+20, dp[5]);</span><br><span class="line">dp[6] = max(dp[1]+20, dp[6]);</span><br><span class="line">dp[7] = max(dp[2]+20, dp[7]);</span><br><span class="line">dp[8] = max(dp[3]+20, dp[8]);</span><br><span class="line">dp[9] = max(dp[4]+20, dp[9]);</span><br><span class="line">dp[10] = max(dp[5]+20, dp[10]);</span><br><span class="line">dp: 0 0 0 0 20 20 20 20 20 40 //看到问题了吗！dp[10]不仅仅是由dp[5]决定了，因为dp[5]还被dp[0]更新了一次，相当于，i=1时，即只有一个物品时，这个物品拿了两次，完全不符合01背包了，但是，这个却是我们后面要提到的完全背包！接着看：</span><br></pre></td></tr></table></figure><hr><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">i=<span class="number">2</span>:</span><br><span class="line">dp[<span class="number">6</span>] = <span class="built_in">max</span>(dp[<span class="number">0</span>]+<span class="number">10</span>, dp[<span class="number">6</span>]);</span><br><span class="line">dp[<span class="number">7</span>] = <span class="built_in">max</span>(dp[<span class="number">1</span>]+<span class="number">10</span>, dp[<span class="number">7</span>]);</span><br><span class="line">dp[<span class="number">8</span>] = <span class="built_in">max</span>(dp[<span class="number">2</span>]+<span class="number">10</span>, dp[<span class="number">8</span>]);</span><br><span class="line">dp[<span class="number">9</span>] = <span class="built_in">max</span>(dp[<span class="number">3</span>]+<span class="number">10</span>, dp[<span class="number">9</span>]);</span><br><span class="line">dp[<span class="number">10</span>] = <span class="built_in">max</span>(dp[<span class="number">4</span>]+<span class="number">10</span>, dp[<span class="number">10</span>]);</span><br></pre></td></tr></table></figure><h2 id="dp-0-0-0-0-20-20-20-20-20-40"><a href="#dp-0-0-0-0-20-20-20-20-20-40" class="headerlink" title="dp: 0 0 0 0 20 20 20 20 20 40"></a><code>dp: 0 0 0 0 20 20 20 20 20 40</code></h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">i=<span class="number">3</span>:</span><br><span class="line">dp[<span class="number">4</span>] = <span class="built_in">max</span>(dp[<span class="number">0</span>]+<span class="number">12</span>, dp[<span class="number">4</span>]);</span><br><span class="line">dp[<span class="number">5</span>] = <span class="built_in">max</span>(dp[<span class="number">1</span>]+<span class="number">12</span>, dp[<span class="number">5</span>]);</span><br><span class="line">dp[<span class="number">6</span>] = <span class="built_in">max</span>(dp[<span class="number">2</span>]+<span class="number">12</span>, dp[<span class="number">6</span>]);</span><br><span class="line">dp[<span class="number">7</span>] = <span class="built_in">max</span>(dp[<span class="number">3</span>]+<span class="number">12</span>, dp[<span class="number">7</span>]);</span><br><span class="line">dp[<span class="number">8</span>] = <span class="built_in">max</span>(dp[<span class="number">4</span>]+<span class="number">12</span>, dp[<span class="number">8</span>]);</span><br><span class="line">dp[<span class="number">9</span>] = <span class="built_in">max</span>(dp[<span class="number">5</span>]+<span class="number">12</span>, dp[<span class="number">9</span>]);</span><br><span class="line">dp[<span class="number">10</span>] = <span class="built_in">max</span>(dp[<span class="number">6</span>]+<span class="number">12</span>, dp[<span class="number">10</span>]);</span><br><span class="line">dp: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">12</span> <span class="number">20</span> <span class="number">20</span> <span class="number">20</span> <span class="number">24</span> <span class="number">32</span> <span class="number">40</span></span><br></pre></td></tr></table></figure><p>分析完毕，之后自己想吧</p><p>重点就是，一维内层循环要倒着来！不然会重复</p><p>一维 dp<em>d**p</em> 代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iostream&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> w[<span class="number">105</span>], val[<span class="number">105</span>];</span><br><span class="line"><span class="type">int</span> dp[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t,m,res=<span class="number">-1</span>;    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;t,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;w[i],&amp;val[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=t;j&gt;=<span class="number">0</span>;j--) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(j&gt;=w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                dp[j]=<span class="built_in">max</span>(dp[j-w[i]]+val[i], dp[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,dp[t]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/18/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88/"/>
      <url>/2022/11/18/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="二分答案"><a href="#二分答案" class="headerlink" title="二分答案"></a>二分答案</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> ll=<span class="number">0</span>,rr=l;<span class="comment">//定义一个二分边界 </span></span><br><span class="line"><span class="keyword">while</span>(ll&lt;=rr)<span class="comment">//当左右边界重合的时候就是答案，退出循环 </span></span><br><span class="line">     &#123;</span><br><span class="line">         mid=(ll+rr)/<span class="number">2</span>;</span><br><span class="line">    <span class="comment">//取两边界的中间值，枚举一个最大距离 </span></span><br><span class="line">         <span class="keyword">if</span>(<span class="built_in">half</span>(mid))<span class="comment">//当该距离满足条件的时候 </span></span><br><span class="line">&#123;</span><br><span class="line">          <span class="comment">//去寻找右半部分，看看还有没有符合条件的更大的值</span></span><br><span class="line">              ll=mid+<span class="number">1</span>;<span class="comment">//ll上mid右边，找右半部分 </span></span><br><span class="line">              ans=mid;<span class="comment">//记录答案（更新中） </span></span><br><span class="line">          &#125;</span><br><span class="line">        <span class="keyword">else</span> rr=mid<span class="number">-1</span>;<span class="comment">//若这个值不满足，就找左部分 </span></span><br><span class="line">     &#125;</span><br><span class="line"><span class="comment">// half函数因题而异，更新边界是+还是-也因题而异</span></span><br></pre></td></tr></table></figure><p>[P2678 <a href="https://www.luogu.com.cn/problem/solution/P2678">NOIP2015 提高组] 跳石头 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>这道题如果要使用暴力搜索直接求解会严重超时。实际上，我们可以发现，这个所谓的最短跳跃距离显然不能超过一个范围，而这个范围题目上已经给了出来。也就是说，答案是有一个确定的范围限制的，我们就可以考虑一种另外的方法去解决——枚举答案，并去验证答案是否可行。</p><p>实际上，枚举答案有时候也会超时。这就好比说你要从一本英汉词典上查一个单词，你从头到尾一页一页的翻着找，这样找可以保证一定能找到，但是最坏情况你要把整本词典都翻一遍，那就麻烦了。</p><p>有什么改进的方法吗？当然有。</p><p>考虑把这个词典从中间分开，看一下中间那一页的主要单词都是啥，然后去判断我要找的单词应该在左半部分还是右半部分，再去那一部分考虑怎么找就好了。同样的，在另一部分也是要进行划分并且判断的操作。这样一直进行下去，便能很快的找到答案，而且根本不需要翻过整个词典来。</p><p>可以证明，如果一页一页的找，最多要找n次，但是用这个方法，最多找floor(log2n)次。</p><p>我们把这个方法叫做“二分答案”。顾名思义，它用二分的方法枚举答案，并且枚举时判断这个答案是否可行。但是，二分并不是在所有情况下都是可用的，使用二分需要满足两个条件。一个是有界，一个是单调。</p><p>二分答案应该是在一个单调闭区间上进行的。也就是说，二分答案最后得到的答案应该是一个确定值，而不是像搜索那样会出现多解。二分一般用来解决最优解问题。刚才我们说单调性，那么这个单调性应该体现在哪里呢？</p><p>可以这样想，在一个区间上，有很多数，这些数可能是我们这些问题的解，换句话说，这里有很多不合法的解，也有很多合法的解。我们只考虑合法解，并称之为可行解。考虑所有可行解，我们肯定是要从这些可行解中找到一个最好的作为我们的答案， 这个答案我们称之为最优解。</p><p>最优解一定可行，但可行解不一定最优。我们假设整个序列具有单调性，且一个数x为可行解，那么一般的，所有的x’(x’&lt;x)都是可行解。并且，如果有一个数y是非法解，那么一般的，所有的y’(y’&gt;y)都是非法解。</p><p>那么什么时候适用二分答案呢？注意到题面：使得选手们在比赛过程中的最短跳跃距离尽可能长。如果题目规定了有“最大值最小”或者“最小值最大”的东西，那么这个东西应该就满足二分答案的有界性（显然）和单调性（能看出来）。</p><p>那就好办了。我们二分跳跃距离，然后把这个跳跃距离“认为”是最短的跳跃距离，然后去以这个距离为标准移石头。使用一个judge判断这个解是不是可行解。如果这个解是可行解，那么有可能会有比这更优的解，那么我们就去它的右边二分。为什么去右边？答案是，这个区间是<strong>递增</strong>的 ，而我们求的是最短跳跃距离的<strong>最大值</strong>，显然再右边的值肯定比左边大，那么我们就有可能找到比这更优的解，直到找不到，那么最后找到的解就有理由认为是区间内最优解。反过来，如果二分到的这个解是一个非法解，我们就不可能再去右边找了。因为性质，右边的解一定全都是非法解。那么我们就应该去左边找解。整个过程看起来很像递归，实际上，这个过程可以递归写， 也可以写成非递归形式，我个人比较喜欢使用非递归形式。</p><p>下一个问题，这个judge怎么实现呢？judge函数每个题有每个题的写法，但大体上的思想应该都是一样的——想办法检测这个解是不是合法。拿这个题来说，我们去判断如果以这个距离为最短跳跃距离需要移走多少块石头，先不必考虑限制移走多少块，等全部拿完再把拿走的数量和限制进行比对，如果超出限制，那么这就是一个非法解，反之就是一个合法解，很好理解吧。</p><p>可以去模拟这个跳石头的过程。开始你在i(i&#x3D;0)位置，我在跳下一步的时候去判断我这个当前跳跃的距离，如果这个跳跃距离比二分出来的mid小，<strong>那这就是一个不合法的石头，应该移走。</strong>为什么？我们二分的是最短跳跃距离，已经是最短了，如果跳跃距离比最短更短岂不是显然不合法，是这样的吧。移走之后要怎么做？先把计数器加上1，再考虑向前跳啊。去看移走之后的下一块石头，再次判断跳过去的距离，如果这次的跳跃距离比最短的长，那么这样跳是完全可以的，我们就跳过去，继续判断，如果跳过去的距离不合法就再拿走，这样不断进行这个操作，直到i &#x3D; n+1，为啥是n+1？河中间有n块石头，显然终点在n+1处。（这里千万要注意不要把n认为是终点，实际上从n还要跳一步才能到终点）。</p><p>模拟完这个过程，我们查看计数器的值，这个值代表的含义是我们以mid作为答案需要移走的石头数量，然后判断这个数量 是不是超了就行。如果超了就返回false，不超就返回true。</p><p>整道题我已经说完了。。。如果实在难以理解，请看代码。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 500010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> d,n,m;</span><br><span class="line"><span class="type">int</span> a[maxn];</span><br><span class="line"><span class="type">int</span> l,r,mid,ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;<span class="comment">//我喜欢快读</span></span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> ((c = <span class="built_in">getchar</span>()) == <span class="string">&#x27; &#x27;</span> || c == <span class="string">&#x27;\n&#x27;</span> || c == <span class="string">&#x27;\r&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        num = c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(c = <span class="built_in">getchar</span>()))</span><br><span class="line">    num = num * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> (flag ? <span class="number">-1</span> : <span class="number">1</span>) * num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">judge</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="comment">//judge函数，x代表当前二分出来的答案</span></span><br><span class="line">    <span class="type">int</span> tot = <span class="number">0</span>;<span class="comment">//tot代表计数器，记录以当前答案需要移走的实际石头数</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;<span class="comment">//i代表下一块石头的编号</span></span><br><span class="line">    <span class="type">int</span> now = <span class="number">0</span>;<span class="comment">//now代表模拟跳石头的人当前在什么位置</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; n+<span class="number">1</span>)&#123;<span class="comment">//千万注意不是n，n不是终点，n+1才是</span></span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">if</span> (a[i] - a[now] &lt; x)<span class="comment">//判断距离，看二者之间的距离算差值就好</span></span><br><span class="line">            tot++;<span class="comment">//判定成功，把这块石头拿走，继续考虑下一块石头</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            now = i;<span class="comment">//判定失败，这块石头不用拿走，我们就跳过去，再考虑下一块</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tot &gt; m)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    d = <span class="built_in">read</span>();<span class="comment">//d代表总长度，也就是右边界</span></span><br><span class="line">    n = <span class="built_in">read</span>();<span class="comment">//n块石头</span></span><br><span class="line">    m = <span class="built_in">read</span>();<span class="comment">//限制移走m块，思考的时候可别被这个m限制</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        a[i] = <span class="built_in">read</span>();</span><br><span class="line">    a[n+<span class="number">1</span>] = d;<span class="comment">//敲黑板划重点，再强调一遍，n不是终点</span></span><br><span class="line">    l = <span class="number">1</span>;<span class="comment">//l和r分别代表二分的左边界和右边界</span></span><br><span class="line">    r = d;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r)&#123;<span class="comment">//非递归式二分正常向写法，可理解为一般框架</span></span><br><span class="line">        mid = (l+r) / <span class="number">2</span>;<span class="comment">//这再看不出是啥意思可以退群了</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">judge</span>(mid))&#123;<span class="comment">//带入judge函数判断当前解是不是可行解</span></span><br><span class="line">            ans = mid;</span><br><span class="line">            l = mid + <span class="number">1</span>;<span class="comment">//走到这里，看来是可行解，我们尝试看看是不是有更好的可行解</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r = mid - <span class="number">1</span>;<span class="comment">//噫，你找了个非法解，赶紧回到左半边看看有没有可行解</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;<span class="comment">//最后的ans绝对是最优解</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二分答案不理解的话是很难看懂的，看了看几份题解有点懵，又去网上找了份<a href="http://www.cnblogs.com/rjgcs/p/5797704.html">博客</a>借鉴了一下题解说不明白的地方，最后由蒟蒻risho来整合一下思路，尽可能说的明白一些，把一开始难住我的地方认真注释了一下</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x7ffffff</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 2000000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,a[maxn],m,ll,rr,l,s,num,mid,ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">half</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">//x是目前的理想距离 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s=<span class="number">0</span>,num=<span class="number">0</span>;<span class="comment">//num是计数器，记录移走的石头数目，s计数器，是指目前的石头离起点的距离（难理解？看底下一层循环） </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">         <span class="comment">//枚举第1到终点的n+1块石头 if(a[i]-s&lt;x)//如果第i块石头的距离减去s，什么意思？这两块石头之间的距离！ 若两块之间的距离&lt;期望的距离</span></span><br><span class="line">num++;<span class="comment">//移走的数目+1，因为你要的是移走0~m块石头，使他们之间的距离都大于等于m</span></span><br><span class="line"><span class="keyword">else</span> s=a[i];<span class="comment">//若距离大于期望距离了，s更新到i的距离</span></span><br><span class="line"><span class="comment">//枚举完了，统计完了移走的数目</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(num&gt;m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//如果移走石块&gt;m才能到期望距离，就是不满足条件</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//否则就是满足条件 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;l,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">     <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    a[n+<span class="number">1</span>]=l;<span class="comment">//n是终点前的最后一块石头，所以a[n+1]=l，记录终点的值 </span></span><br><span class="line">    ll=<span class="number">0</span>,rr=l;<span class="comment">//定义一个二分边界 </span></span><br><span class="line">    <span class="keyword">while</span>(ll&lt;=rr)<span class="comment">//当左右边界重合的时候就是答案，退出循环 </span></span><br><span class="line">     &#123;</span><br><span class="line">         mid=(ll+rr)/<span class="number">2</span>;<span class="comment">//取两边界的中间值，枚举一个最大距离 </span></span><br><span class="line">         <span class="keyword">if</span>(<span class="built_in">half</span>(mid))<span class="comment">//当该距离满足条件的时候 </span></span><br><span class="line">&#123;</span><br><span class="line">              <span class="comment">//去寻找右半部分，看看还有没有符合条件的更大的值</span></span><br><span class="line">              ll=mid+<span class="number">1</span>;<span class="comment">//ll上mid右边，找右半部分 </span></span><br><span class="line">              ans=mid;<span class="comment">//记录答案（更新中） </span></span><br><span class="line">          &#125;</span><br><span class="line">        <span class="keyword">else</span> rr=mid<span class="number">-1</span>;<span class="comment">//若这个值不满足，就找左部分 </span></span><br><span class="line">     &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);<span class="comment">//输出答案（循环时已经更新了） </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/11/18/hello-world/"/>
      <url>/2022/11/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
